# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/google-maps/all/google-maps.rbi
#
# google-maps-3.0.5
module Google
end
module Google::Maps
  def self.distance(from, to, options = nil); end
  def self.duration(from, to, options = nil); end
  def self.geocode(address, language = nil); end
  def self.options_with_defaults(options); end
  def self.place(place_id, language = nil); end
  def self.places(keyword, language = nil); end
  def self.route(from, to, options = nil); end
  extend Google::Maps::Configuration
  extend Google::Maps::Logger
end
class Google::Maps::InvalidConfigurationError < StandardError
end
module Google::Maps::Configuration
  def api_key; end
  def api_key=(arg0); end
  def authentication_mode; end
  def authentication_mode=(arg0); end
  def client_id; end
  def client_id=(arg0); end
  def client_secret; end
  def client_secret=(arg0); end
  def configure; end
  def default_language; end
  def default_language=(arg0); end
  def default_params; end
  def default_params=(arg0); end
  def directions_service; end
  def directions_service=(arg0); end
  def end_point; end
  def end_point=(arg0); end
  def format; end
  def format=(arg0); end
  def geocode_service; end
  def geocode_service=(arg0); end
  def options; end
  def place_details_service; end
  def place_details_service=(arg0); end
  def places_service; end
  def places_service=(arg0); end
  def reset; end
  def self.extended(base); end
  def validate_api_key; end
  def validate_config; end
  def validate_digital_signature; end
end
module Google::Maps::Logger
  def log_file=(file); end
  def logger; end
  def logger=(arg0); end
  def self.extended(base); end
end
class Google::Maps::Result < Hashie::Mash
end
class Google::Maps::InvalidResponseException < StandardError
end
class Google::Maps::InvalidPremierConfigurationException < StandardError
end
class Google::Maps::ZeroResultsException < Google::Maps::InvalidResponseException
end
class Google::Maps::API
  def self.add_digital_signature(url); end
  def self.base_url(service, args = nil); end
  def self.decode_url_safe_base_64(value); end
  def self.encode_url_safe_base_64(value); end
  def self.handle_result_status(status); end
  def self.query(service, args = nil); end
  def self.query_string(args = nil); end
  def self.response(url); end
  def self.url(service, args = nil); end
  def self.url_with_api_key(service, args = nil); end
  def self.url_with_digital_signature(service, args = nil); end
end
class Google::Maps::Route
  def destination_latlong; end
  def from; end
  def from=(arg0); end
  def initialize(from, to, options = nil); end
  def method_missing(method_name, *args, &block); end
  def options; end
  def options=(arg0); end
  def origin_latlong; end
  def respond_to_missing?(method_name, include_private = nil); end
  def route; end
  def to; end
  def to=(arg0); end
end
class Google::Maps::Place
  def highligh_keywords(data, keyword); end
  def html; end
  def initialize(data, keyword); end
  def keyword; end
  def place_id; end
  def self.find(keyword, language = nil); end
  def text; end
  def to_html; end
  def to_s; end
end
class Google::Maps::PlaceDetails
  def address; end
  def address_components; end
  def data; end
  def initialize(data); end
  def latitude; end
  def longitude; end
  def name; end
  def photos; end
  def place_id; end
  def self.find(place_id, language = nil); end
  def to_s; end
  def url; end
  def website; end
end
class Google::Maps::PlaceDetails::AddressComponentsProxy
  def initialize(address_components); end
  def method_missing(method_name, *args); end
  def respond_to_missing?(method_name, include_private = nil); end
end
class Google::Maps::Location
  def address; end
  def components; end
  def initialize(address, latitude, longitude, components = nil); end
  def lat_lng; end
  def latitude; end
  def longitude; end
  def self.find(address, language = nil); end
  def self.format_components(address_components); end
  def to_s; end
end
